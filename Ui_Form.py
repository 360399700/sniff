# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Ui_Form.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import threading
import time
from scapy.all import *
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    bytels = []
    pack = []
    filter = None
    flag = 0
    count = 0
    src = ''
    dst = ''
    pro = ''
    len = 0

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(815, 607)
        self.start = QtWidgets.QPushButton(Form)
        self.start.setGeometry(QtCore.QRect(0, 0, 93, 28))
        self.start.setObjectName("start")
        self.stop = QtWidgets.QPushButton(Form)
        self.stop.setGeometry(QtCore.QRect(100, 0, 93, 28))
        self.stop.setObjectName("stop")
        self.submit = QtWidgets.QPushButton(Form)
        self.submit.setGeometry(QtCore.QRect(690, 0, 93, 28))
        self.submit.setObjectName("submit")
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setGeometry(QtCore.QRect(0, 30, 811, 192))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.textEdit_1 = QtWidgets.QTextEdit(Form)
        self.textEdit_1.setGeometry(QtCore.QRect(0, 220, 811, 181))
        self.textEdit_1.setObjectName("textEdit_1")
        self.textEdit_2 = QtWidgets.QTextEdit(Form)
        self.textEdit_2.setGeometry(QtCore.QRect(0, 400, 811, 191))
        self.textEdit_2.setObjectName("textEdit_2")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(260, 0, 421, 31))
        self.lineEdit.setObjectName("lineEdit")

        self.textEdit_1.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.textEdit_1.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)

        self.retranslateUi(Form)
        self.start.clicked.connect(Form.startFunc)
        self.stop.clicked.connect(Form.stopFunc)
        self.submit.clicked.connect(Form.submitFunc)
        self.tableWidget.itemSelectionChanged.connect(Form.Func)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.start.setText(_translate("Form", "START"))
        self.stop.setText(_translate("Form", "STOP"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Source"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Destination"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Protocol"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Length"))

    def callback(self, packet):
        try:
            if 'TCP' in packet:
                self.src = str(packet['IP'].src)
                self.dst = str(packet['IP'].dst)
                self.pro = 'TCP'
            elif 'UDP' in packet:
                self.src = str(packet['IP'].src)
                self.dst = str(packet['IP'].dst)
                self.pro = 'UDP'
            elif 'ICMP' in packet:
                self.src = str(packet['IP'].src)
                self.dst = str(packet['IP'].dst)
                self.pro = 'ICMP'
            elif 'ARP' in packet:
                self.src = str(packet['ARP'].psrc)
                self.dst = str(packet['ARP'].pdst)
                self.pro = 'ARP'
            else:
                self.src = str(packet['Ether'].src)
                self.dst = str(packet['Ether'].dst)
                self.pro = 'other'
            self.len = len(packet)
        except:
            pass
        else:
            self.pack.append(packet)
            items = [self.src, self.dst, self.pro, str(self.len)]
            row = self.tableWidget.rowCount()
            self.tableWidget.insertRow(row)
            for i in range(len(items)):
                item = QtWidgets.QTableWidgetItem(str(items[i]))
                self.tableWidget.setItem(row, i, item)
            self.count += 1

    def task1(self):
        self.flag = 1
        while self.flag == 1:
            dpkt = sniff(iface=r"WLAN", count=1, prn=self.callback, filter=self.filter)
            # time.sleep(1)

    def task2(self):
        prodic = {'01': 'ICMP', '06': 'TCP', '11': 'UDP'}

        selected_items = self.tableWidget.selectedIndexes()
        row = selected_items[0].row()

        self.bytels = self.MyHexdump(self.pack[row]).split()
        smac = reduce(lambda x, y: x + ':' + y, self.bytels[6:12])
        dmac = reduce(lambda x, y: x + ':' + y, self.bytels[0:6])
        type = reduce(lambda x, y: x + y, self.bytels[12:14])
        txt1 = '-layer 1 (14 bytes) = Ethernet {SrcMac:' + smac + ' DstMac:' + dmac + ' PType:' + type + '}'
        self.textEdit_1.append(txt1)

        if type == '0800':
            version = str(int(self.bytels[14][0], 16))
            IHL = str(int(self.bytels[14][1], 16))
            TOS = str(int(self.bytels[14 + 1], 16))
            TL = str(int(self.bytels[14 + 2] + self.bytels[14 + 3], 16))
            ID = str(int(self.bytels[14 + 4] + self.bytels[14 + 5], 16))
            TTL = str(int(self.bytels[14 + 8], 16))
            protocol = prodic[self.bytels[14 + 9]]
            HC = str(int(self.bytels[14 + 10] + self.bytels[14 + 11], 16))
            sip = reduce(lambda x, y: x + '.' + y, map(lambda x: str(int(x, 16)), self.bytels[14 + 12: 14 + 16]))
            dip = reduce(lambda x, y: x + '.' + y, map(lambda x: str(int(x, 16)), self.bytels[14 + 16: 14 + 20]))
            txt2 = ('-layer 2 (%d bytes) = IPv4 {Version:' + version + ' IHL:' + IHL + ' TOS:' + TOS + ' TL:' + TL + ' \
ID:' + ID + ' TTL:' + TTL + ' Protocol:' + protocol + ' HC:' + HC + ' Source Address:' + sip + ' Destination Address:' + dip +'}') % (int(IHL) * 4)
            self.textEdit_1.append(txt2)
            if protocol == 'TCP':
                sport = str(int(self.bytels[34] + self.bytels[34 + 1], 16))
                dport = str(int(self.bytels[34 + 2] + self.bytels[34 + 3], 16))
                seq = reduce(lambda x, y: x + y, map(lambda x: str(int(x, 16)), self.bytels[34 + 4: 34 + 8]))
                ack = reduce(lambda x, y: x + y, map(lambda x: str(int(x, 16)), self.bytels[34 + 8: 34 + 12]))
                offset = str(int(self.bytels[34 + 12][0], 16))
                txt3 = ('-layer 3 (%d bytes) = TCP {SrcPort:' + sport + ' DstPort:' + dport + ' Seq:' + seq + ' Ack:' + ack + ' \
DataOffset:' + offset + '}') % (int(offset) * 4)
                txt4 = '-layer 4 (%d bytes)' % (len(self.bytels) - 14 - int(IHL) * 4 - int(offset) * 4)
            elif protocol == 'UDP':
                sport = str(int(self.bytels[34] + self.bytels[34 + 1], 16))
                dport = str(int(self.bytels[34 + 2] + self.bytels[34 + 3], 16))
                TL = str(int(self.bytels[34 + 4] + self.bytels[34 + 5], 16))
                txt3 = '-layer 3 (8 bytes) = UDP {SrcPort:' + sport + ' DstPort:' + dport + ' Total Length:' + TL + '}'
                txt4 = '-layer 4 (%d bytes)' % (len(self.bytels) - 14 - int(IHL) * 4 - 8)
            self.textEdit_1.append(txt3)
            self.textEdit_1.append(txt4)
        elif type == '0806':
            HT = str(int(self.bytels[14] + self.bytels[14 + 1], 16))
            PT = str(int(self.bytels[14 + 2] + self.bytels[14 + 3], 16))
            HL = str(int(self.bytels[14 + 4], 16))
            PL = str(int(self.bytels[14 + 5], 16))
            OC = str(int(self.bytels[14 + 6] + self.bytels[14 + 7], 16))
            SMA = reduce(lambda x, y: x + ':' + y, self.bytels[14 + 8: 14 + 14])
            SPA = reduce(lambda x, y: x + '.' + y, map(lambda x: str(int(x, 16)), self.bytels[14 + 14: 14 + 18]))
            DMA = reduce(lambda x, y: x + ':' + y, self.bytels[14 + 18: 14 + 24])
            DPA = reduce(lambda x, y: x + '.' + y, map(lambda x: str(int(x, 16)), self.bytels[14 + 24: 14 + 28]))
            txt2 = '-layer 2 (28 bytes) = ARP {Hardware Type:' + HT + ' Protocol Type:' + PT + ' Hardware Length:' + HL + ' \
Protocol Length:' + PL + ' Operation Code:' + OC + ' Source Hardware Address:' + SMA + ' Source Potocol Address:' + SPA + ' \
Destination Hardware Address:' + DMA + ' Destination Protocol Address:' + DPA + '}'
            self.textEdit_1.append(txt2)
        elif type == '86DD':
            version = str(int(self.bytels[14][0], 16))
            TC = str(int(self.bytels[14][1] + self.bytels[14 + 1][0], 16))
            FL = str(int(self.bytels[14 + 1][1] + self.bytels[14 + 2] + self.bytels[14 + 3], 16))
            PL = str(int(self.bytels[14 + 4] + self.bytels[14 + 5], 16))
            NH = str(int(self.bytels[14 + 6], 16))
            HL = str(int(self.bytels[14 + 7], 16))
            SA = reduce(lambda x, y: x + ':' + y, self.bytels[14 + 8: 14 + 24])
            DA = reduce(lambda x, y: x + ':' + y, self.bytels[14 + 24: 14 + 40])
            txt2 = '-layer 2 (40 bytes) = IPv6 {Version:' + version + ' Traffic class:' + TC + ' Flow Label:' + FL + ' \
PayLoad Length:' + PL + ' Next Header:' + NH + ' Hop Limit:' + HL + ' Source Address:' + SA + ' Destination Address:' + DA + '}'
            self.textEdit_1.append(txt2)
            if NH == '00':
                pass
            elif NH == '06':
                pass
            elif NH == '17':
                pass
            elif NH == '58':
                mess_type = str(int(self.bytels[54], 16))
                if mess_type == '135':
                    Code = str(int(self.bytels[54 + 1], 16))
                    Checksum = str(int(self.bytels[54 + 2] + self.bytels[54 + 3], 16))
                    txt3 = '-layer 3 (4 bytes) = ICMPv6 {Message Type:' + mess_type + ' Code:' + Code + ' Checksum:' + Checksum + '}'
                    Reserved = str(int(reduce(lambda x, y: x + y, self.bytels[54 + 4: 54 + 8])))
                    TA = reduce(lambda x, y: x + ':' + y, self.bytels[54 + 8: 54 + 24])
                    Options = self.bytels[54 + 24] + self.bytels[54 + 25]
                    txt4 = ('-layer 4 (%d bytes) = {Reserved:' + Reserved + ' Target Addressed:' + TA + ' Options:' + Options + ' \
' + reduce(lambda x, y: x + ':' + y, self.bytels[54 + 26: 54 + 32])) % (len(self.bytels) - 14 - 40 - 4)
                    self.textEdit_1.append(txt3)
                    self.textEdit_1.append(txt4)

        self.textEdit_2.append(hexdump(self.pack[row], True))

    def MyHexdump(self, packet):
        s = ''
        x = bytes_encode(packet)
        x_len = len(x)
        i = 0
        while i < x_len:
            s += '%02X ' % orb(x[i])
            i += 1
        return s

    def startFunc(self):
        thread = threading.Thread(target=self.task1)
        thread.start()
        # thread.join()

    def stopFunc(self):
        self.flag = 0

    def submitFunc(self):
        self.filter = self.lineEdit.text()
        if self.filter == '':
            self.filter = None

    def Func(self):
        self.textEdit_1.clear()
        self.textEdit_2.clear()
        thread = threading.Thread(target=self.task2)
        thread.start()
